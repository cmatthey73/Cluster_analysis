names(age)<-c('0_5y', '5_10y', '10_20y', '20y')
age<-lapply(age, function(x)
cbind(x[,-c(which(names(x)=='categorie' | names(x)=='partie'))],
categorie=factor(x$categorie), partie=factor(x$partie)))
age_rot<-lapply(age, function(x) x[x$partie!='y',])
age_rot<-lapply(age_rot, function(x)
cbind(x[,-c(which(names(x)=='categorie' | names(x)=='partie'))],
categorie=factor(x$categorie), partie=factor(x$partie)))
# Graphiques distributions par nb pièces
pdf(paste0(path, 'Distributions1_', run.date, '.pdf'))
for (i in 1:6)
{
p<-room[[i]]
# windows()
print(ggplot(p, aes(y=rent, x=partie, color=categorie))+geom_point(alpha=0.4, position = position_jitter(width = 0.2))+
geom_boxplot(fill=NA, col='black', outlier.colour = NA)+stat_summary(fun.y = mean, geom = 'point', shape=13, size=4, col='red')+theme_bw()+
facet_grid(categorie~., scale='free_y'))
}
dev.off()
# Analyse rotation pour un certain nb pièces (NE FONCTIONNE QU'AVEC LES RENTESTIMATE !!)
anal_rot<-function(nbpces, l_lim, u_lim)
{
base<-room_rot[[nbpces]]
base<-subset(base, rent>=l_lim&rent<=u_lim) # gestion outliers pour tests, sinon mettre l_lim=0 et u_lim=Inf
mean_base<-plyr::ddply(base, c('partie', 'categorie'), summarize, geomean=exp(sum(weight*log(rent))/sum(weight)), nb=length(rent))
mean_est_base<-plyr::ddply(base[!is.na(base$rentest),], c('partie', 'categorie'), summarize,
geomeanest=exp(sum(weight*log(rentest))/sum(weight)), nbest=length(rentest))
temp<-merge(mean_base[mean_base$partie=='x',], mean_base[mean_base$partie=='z',], by=c('categorie'), all=T)
names(temp)<-c('categorie', 'partie_x','geomean_x', 'nb_x', 'partie_z',	'geomean_z', 'nb_z')
temp_est<-merge(mean_est_base[mean_base$partie=='x',], mean_est_base[mean_est_base$partie=='z',], by=c('categorie'), all=T)
names(temp_est)<-c('categorie', 'partie_x','geomeanest_x', 'nbest_x', 'partie_z',  'geomeanest_z' , 'nbest_z')
temp<-merge(temp, temp_est, by=c('categorie', 'partie_x', 'partie_z'), all=T)
temp$ratio<-with(temp, geomeanest_x/geomeanest_z)
temp$geomeancor_z<-with(temp, geomean_z*geomeanest_x/geomeanest_z)
temp$geomeancor_z<-ifelse(temp$nbest_z<3 | temp$nbest_x<3, temp$geomean_z, temp$geomeancor_z)
mean_base<-temp
mean_base$index<-with(mean_base, geomeancor_z/geomean_x*100)
#windows()
boxplot(base$rent~base$partie*base$categorie, main=paste('Distribution ',nbpces, 'pièces (rotation)', sep=''), ylim=c(min(base$rent)-150, max(base$rent)+150))
points(seq(1,7, by=2), mean_base$geomean_x, pch="*", col="blue", cex=2)
text(seq(1,7, by=2), min(base$rent), labels=mean_base$nb_x, cex=0.8)
#text(seq(1,7, by=2), 450, labels=mean_base$nbest_x, cex=0.8)
points(seq(2,8, by=2), mean_base$geomean_z, pch="*", col="blue", cex=2)
text(seq(2,8, by=2), min(base$rent), labels=mean_base$nb_z, cex=0.8)
#text(seq(2,8, by=2), 450, labels=mean_base$nbest_z, cex=0.8)
#text(seq(2,8, by=2), mean_base$geomeancor_z-50, labels=round(mean_base$index,1), cex=0.8)
text(seq(2,8, by=2), min(base$rent)-100, labels=round(mean_base$index,1), cex=0.8)
points(seq(2,8, by=2), mean_base$geomeancor_z, pch="*", col="red", cex=2)
output<-list(mean_base, base)
names(output)<-c('mean_base', 'base')
return(output)
}
# Analyse folge et total (direct) pour un certain nb pièces
anal_folge<-function(nbpces)
{
base_t<-tot[tot$indic_t&substr(tot$categorie_t,2,2)==nbpces,]
base_t$flag<-'t'
base_tprev<-tot[tot$indic_tprev&substr(tot$categorie_tprev,2,2)==nbpces,]
base_tprev$flag<-'tprev'
base_t$categorie<-base_t$categorie_t
base_tprev$categorie<-base_tprev$categorie_tprev
base<-rbind(base_t, base_tprev) # attention : doublons si présents aux 2 période, distinction=flag !
base$flag<-factor(base$flag, levels=c('tprev', 't'))
rm(base_t, base_tprev)
mean_base_t<-plyr::ddply(base[base$flag=='t',], c('partie', 'categorie_t'), summarize, geomean_t=exp(sum(weight*log(rent_t))/sum(weight)),
nbt=length(rent_t) )
mean_base_tprev<-plyr::ddply(base[base$flag=='tprev',], c('partie', 'categorie_tprev'), summarize, geomean_tprev=exp(sum(weight*log(rent_tprev))/sum(weight)),
nbtprev=length(rent_tprev))
mean_base_y<-merge(mean_base_t[mean_base_t=='y',], mean_base_tprev[mean_base_tprev=='y',], by.x=c('partie', 'categorie_t'), by.y=c('partie', 'categorie_tprev'), all=T)
mean_base_xz<-merge(mean_base_t[mean_base_t=='z',], mean_base_tprev[mean_base_tprev=='x',], by.x=c('categorie_t'), by.y=c('categorie_tprev'), all=T)
mean_base_y$index<-with(mean_base_y, geomean_t/geomean_tprev*100)
mean_base_xz$index<-with(mean_base_xz, geomean_t/geomean_tprev*100)
#windows()
boxplot(base$rent~base$flag*base$categorie, main=paste('Distribution ',nbpces, 'pièces (folge)', sep=''))
points(seq(1,7, by=2), mean_base_y$geomean_tprev, pch="*", col="blue", cex=2)
text(seq(1,7, by=2), 600, labels=mean_base_y$nbtprev, cex=0.8)
points(seq(2,8, by=2), mean_base_y$geomean_t, pch="*", col="blue", cex=2)
text(seq(2,8, by=2), 600, labels=mean_base_y$nbt, cex=0.8)
text(seq(2,8, by=2), 450, labels=round(mean_base_y$index,1), cex=0.8)
output<-list(mean_base_y, mean_base_xz, base)
names(output)<-c('mean_base_y', 'mean_base_xz', 'base')
return(output)
}
anal_tot<-function(nbpces)  # ! indices totaux non ajustés !
{
base_t<-tot[tot$indic_t&substr(tot$categorie_t,2,2)==nbpces,]
base_t$flag<-'t'
base_tprev<-tot[tot$indic_tprev&substr(tot$categorie_tprev,2,2)==nbpces,]
base_tprev$flag<-'tprev'
base_t$categorie<-base_t$categorie_t
base_tprev$categorie<-base_tprev$categorie_tprev
base<-rbind(base_t, base_tprev) # attention : doublons si présents aux 2 période, distinction=flag !
base$flag<-factor(base$flag, levels=c('tprev', 't'))
rm(base_t, base_tprev)
mean_base_t<-plyr::ddply(base[base$flag=='t',], c('categorie_t'), summarize, geomean_t=exp(sum(weight*log(rent_t))/sum(weight)),
nbt=length(rent_t) )
mean_base_tprev<-plyr::ddply(base[base$flag=='tprev',], c('categorie_tprev'), summarize, geomean_tprev=exp(sum(weight*log(rent_tprev))/sum(weight)),
nbtprev=length(rent_tprev))
mean_base<-merge(mean_base_t, mean_base_tprev, by.x=c('categorie_t'), by.y=c('categorie_tprev'), all=T)
mean_base$index<-with(mean_base, geomean_t/geomean_tprev*100)
#windows()
boxplot(base$rent~base$flag*base$categorie, main=paste('Distribution ',nbpces, 'pièces (tot)', sep=''))
points(seq(1,7, by=2), mean_base$geomean_tprev, pch="*", col="blue", cex=2)
text(seq(1,7, by=2), 600, labels=mean_base$nbtprev, cex=0.8)
points(seq(2,8, by=2), mean_base$geomean_t, pch="*", col="blue", cex=2)
text(seq(2,8, by=2), 600, labels=mean_base$nbt, cex=0.8)
text(seq(2,8, by=2), 450, labels=round(mean_base$index,1), cex=0.8)
output<-list(mean_base, base)
names(output)<-c('mean_base', 'base')
return(output)
}
pdf(paste0(path, 'Distributions2_', run.date, '.pdf'))
for (i in 2:6)
{
pces<-i
anal_rot(pces,0,Inf)
anal_folge(pces)
}
dev.off()
# low_rent<-subset(tot, categorie=='164'&rent<=2000&partie=='z')
# a<-anal_rot(2, 0,Inf)
#
# tot$rent<-tot$rent_nooutl # remplacement de rent par rent_nooutl pour tester hors outliers
#
# for (i in 2:6)
# {
#   pces<-i
#   anal_rot(pces,0,Inf)
#   anal_folge(pces)
# }
# Comparaison distributions
test_distrib<-function(nbpces, l_lim, u_lim)
{
anal_rot(nbpces, l_lim, u_lim)
a<-anal_tot(nbpces)[[2]]
dev.off()
b<-split(a, a$categorie)
#b<-split(a[a$categorie!=161,], a$categorie[a$categorie!=161])
windows()
par(mfrow=c(2,2))
lapply(b, function(a) {
#print(ks.test(x=a[a$partie %in% c('x'),'rent'], y=a[a$partie %in% c('y'),'rent']))
#print(ks.test(x=a[a$partie %in% c('z'),'rent'], y=a[a$partie %in% c('y'),'rent']))
plot(density(a[a$partie=='x','rent'], na.rm=T), col='blue', ylim=c(0,2/1000), main =
paste0('cellule : ',unique(a$categorie) ), xlab='')
lines(density(a[a$partie=='z','rent'], na.rm=T), col='red')
lines(density(a[a$partie=='y'&a$flag=='t','rent'], na.rm=T), col='black')
lines(density(a[a$partie=='y'&a$flag=='tprev','rent_tprev'], na.rm=T), lty=3,col='black')
#legend(x='topright', lty=1, col=c('blue', 'red', 'black'),legend=unique(a$partie), cex=0.7)
title(xlab = paste('tailles xyz:', length(a[a$partie=='x','rent']), length(a[a$partie=='y'&a$flag=='t','rent']),
length(a[a$partie=='z','rent']), sep=' '))
})
#return(b)
}
test_distrib(6,0,Inf)
test_distrib(5,0,Inf)
test_distrib(4,0,Inf)
test_distrib(3,0,Inf)
# Divers contrôles ---- REVOIR LA PARTIE HEDONIQUE APRES ADAPTATIONS FINALES PRESTA
# 1) Efficacité hédonique (déséquilibre entre nb entrant corrigés et nb sortant corrigés)
# 1.1.) Nb x et z avec loyer estimé
prep_rentest<-function(df){
rentest<-subset(df, partie %in% c('x','z')&!is.na(rentest)) %>% group_by(categorie, partie) %>% summarise(nb=length(rent))
no_rentest<-subset(df, partie %in% c('x', 'z')&is.na(rentest)) %>% group_by(categorie, partie) %>% summarise(nb=length(rent))
anal_rentest<-merge(no_rentest, rentest, by = c('categorie', 'partie'), all.y=T, suffixes = c('_no_rentest', '_rentest'))
list<-expand.grid(categorie=unique(anal_rentest$categorie), partie=unique(anal_rentest$partie))
anal_rentest<-merge(list, anal_rentest, by = c('categorie', 'partie'), all.x=T)%>% arrange(categorie, partie)
anal_rentest[is.na(anal_rentest)]<-0
anal_rentest$nb<-with(anal_rentest, nb_rentest+nb_no_rentest)
anal_rentest$ratio_rentest<-with(anal_rentest, 100*(nb_rentest/nb))
data<-merge(anal_rentest[anal_rentest$partie=='x',-c(2,3)],anal_rentest[anal_rentest$partie=='z',-c(2,3)], by = c('categorie'),
suffixes=c('_x', '_z'))
windows()
par(mfrow=c(1,1))
plot(data$ratio_rentest_x, data$ratio_rentest_z, ylim=c(60,100))
abline(a=0, b=1)
text(x=data$ratio_rentest_x[data$ratio_rentest_x>data$ratio_rentest_z],
y=data$ratio_rentest_z[data$ratio_rentest_x>data$ratio_rentest_z],labels=data$categorie[data$ratio_rentest_x>data$ratio_rentest_z],cex=0.9)
print(sum(data$nb_rentest_x)/sum(data$nb_x)*100)
print(sum(data$nb_rentest_z)/sum(data$nb_z)*100)
return(list(no_rentest=no_rentest, anal_rentest=anal_rentest))
}
anal_rentest<-prep_rentest(tot)
anal_rentest_old<-prep_rentest(tot_old)
cbind(anal_rentest$anal_rentest, anal_rentest_old$anal_rentest)
# 1.2.) Distributions rent et rentest pour x et z (cellules ...4)
data<-split(tot, tot$categorie )[c('114', '124', '134', '144', '154', '164')]
data<-lapply(data, function(x) subset(x, x$partie %in% c('x', 'z') ))
pdf(paste0(path, 'Distributions_rentvsrentest_', run.date, '.pdf'))
lapply(data, function(x)
{
# windows()
par(mfrow=c(1,2))
boxplot(x$rent~x$partie, main=unique(x$categorie))
title(xlab = paste('tailles rent xz :  ', length(x[x$partie=='x','rent']),
length(x[x$partie=='z','rent']), sep=' '))
boxplot(x$rentest~x$partie)
title(xlab = paste('tailles rentest xz :  ', length(x[x$partie=='x'&!is.na(x$rentest),'rent']),
length(x[x$partie=='z'&!is.na(x$rentest),'rent']), sep=' '))
}
)
dev.off()
# 1.3.) Caractéristiques x et z  !! A EFFECTUER SI BESOIN, PERMET ANALYSE DETAILLEE ET COMPARAISON AVEC TOUTES LES OBS (MANQUENT LES POIDS) !!
### PAS ENCORE ADAPTE AU NOUVEAU MODELE !!
det_old<-read.csv2('W:/09_MPI_Produktion/07 CALC, Résultats/2021_02/Analyses/BASE_DETRENT_42019.csv', na.strings=".",
header=T, sep=";", dec=".",stringsAsFactors = FALSE)
det_hedo<-read.csv2('W:/09_MPI_Produktion/07 CALC, Résultats/2021_02/Analyses/SCORE_STRUKTI1.csv', na.strings=".",
header=T, sep=";", dec=".",stringsAsFactors = FALSE)
det_new<-read.csv2('W:/09_MPI_Produktion/07 CALC, Résultats/2021_02/Analyses/BASE_DETRENT_42020.csv', na.strings=".",
header=T, sep=";", dec=".",stringsAsFactors = FALSE)
det_new<-det_new[, colnames(det_old)] # doivent avoir les mêmes noms, ici mise dans le même ordre !! #
col<-grep('APAR|constr|floor|surface|CANTON|COMMUN|COORD|last|house|buildyear|owner|relation|LAYER', colnames(det_old))
nocol<-grep('first|next', colnames(det_old))
col<-col[!col %in% nocol]
tot_augm<-merge(tot, det_hedo, by.x='apartment_nb', by.y='APARTMENT_NB', all.x=T)
det_list<-list()
det_list[[1]]<-merge(subset(tot_augm[,-grep('tranche|last|COORD', colnames(tot_augm))], partie %in% c('x')), det_old[,col], by.x='apartment_nb', by.y='APARTMENT_NB')
det_list[[2]]<-merge(subset(tot_augm[,-grep('tranche|last|COORD', colnames(tot_augm))], partie %in% c('z')), det_new[,col], by.x='apartment_nb', by.y='APARTMENT_NB')
det_list[[3]]<-merge(subset(tot_augm[,-grep('tranche|last|COORD', colnames(tot_augm))], partie %in% c('y')),
rbind(det_new[,col], det_old[!det_old$APARTMENT_NB %in% det_new$APARTMENT_NB, col]),
by.x='apartment_nb', by.y='APARTMENT_NB', all.x = T)
table(det_list[[3]]$relation, useNA="always")
names(det_list)<-c('x_det','z_det', 'y_det')
det_list<-lapply(det_list, function(x)
{ x$rentest_flg<-!is.na(x$rentest)
x$surf_imp<-ifelse(is.na(x$surface), x$surface_regbl, x$surface)
x$surf_pce<-x$surf_imp/as.numeric(as.character(x$room))
x$buildage<-ifelse(2018-x$buildyear>100, 100,2018-x$buildyear)
x$stock<-ifelse(x$floor>20|is.na(x$floor)|x$floor<0, 1, x$floor)
x$tenancy<-2018-x$last
x$commune<-as.character(x$COMMUNE_NB)
x})
prop_noweight<-function(var, cellule)
{
data<-lapply(det_list, function(x) {
x %>% filter(categorie==cellule) %>% group_by_at(.vars = var) %>% summarise(nb_tot=length(rent),
nb_rentest=sum(rentest_flg)) %>%
ungroup %>% mutate(part_tot=nb_tot/sum(nb_tot)*100, part_rentest=nb_rentest/sum(nb_rentest)*100) })
a<-data[[1]]
b<-data[[2]]
c<-merge(a,b, by=var, all=T, suffixes=c('_x', '_z'))
if (is.numeric(b[[1]])) {
a<-a[!is.na(a[,var]),] %>%
summarise( nb_tot_x=sum(nb_tot),
nb_rentest_x=sum(nb_rentest),
geomeanX_tot=exp(sum(log(a[!is.na(a[,var]),var])*nb_tot, na.rm=T)/sum(nb_tot,na.rm=T)) ,
geomeanX_rentest=exp(sum(log(a[!is.na(a[,var]),var])*nb_rentest, na.rm=T)/sum(nb_rentest,na.rm=T)) ,
aritmeanX_tot=sum(a[!is.na(a[,var]),var]*nb_tot, na.rm=T)/sum(nb_tot, na.rm=T) ,
aritmeanX_rentest=sum(a[!is.na(a[,var]),var]*nb_rentest,na.rm=T)/sum(nb_rentest,na.rm=T),
aritmeanX2_tot=sum(a[!is.na(a[,var]),var]**2*nb_tot, na.rm=T)/sum(nb_tot, na.rm=T) ,
aritmeanX2_rentest=sum(a[!is.na(a[,var]),var]**2*nb_rentest,na.rm=T)/sum(nb_rentest,na.rm=T)
)
b<-b[!is.na(b[,var]),]%>%
summarise(nb_tot_z=sum(nb_tot),
nb_rentest_z=sum(nb_rentest),
geomeanZ_tot=exp(sum(log(b[!is.na(b[,var]),var])*nb_tot, na.rm=T)/sum(nb_tot,na.rm=T)) ,
geomeanZ_rentest=exp(sum(log(b[!is.na(b[,var]),var])*nb_rentest, na.rm=T)/sum(nb_rentest,na.rm=T)) ,
aritmeanZ_tot=sum(b[!is.na(b[,var]),var]*nb_tot, na.rm=T)/sum(nb_tot, na.rm=T) ,
aritmeanZ_rentest=sum(b[!is.na(b[,var]),var]*nb_rentest,na.rm=T)/sum(nb_rentest,na.rm=T),
aritmeanZ2_tot=sum(b[!is.na(b[,var]),var]**2*nb_tot, na.rm=T)/sum(nb_tot, na.rm=T) ,
aritmeanZ2_rentest=sum(b[!is.na(b[,var]),var]**2*nb_rentest,na.rm=T)/sum(nb_rentest,na.rm=T)
)
d<-cbind(a,b)
}
else if (var=='CANTON_CD'|var=='commune')
{ e<-det_list$x_det %>% filter(categorie==cellule&rentest_flg) %>% group_by_at(.vars = var) %>%
summarise(exp_aritmeanX_rentest=exp(mean(Lagerating,na.rm=T))
)
f<-det_list$z_det %>% filter(categorie==cellule&rentest_flg)%>% group_by_at(.vars = var) %>%
summarise(exp_aritmeanZ_rentest=exp(mean(Lagerating,na.rm=T))
)
d<-merge(e,f, by=var, all=T, suffixes=c('', ''))
d<-merge(c,d, by=var, all=T, suffixes=c('', ''))
d[is.na(d)]<-0
d$facteur_rentest<-with(d, exp_aritmeanZ_rentest**(part_rentest_z/100)/exp_aritmeanX_rentest**(part_rentest_x/100))
d$part_tot_x_adapt<-ifelse(d$part_rentest_x==0,0,d$part_tot_x)
d$part_tot_x_adapt<-d$part_tot_x_adapt/sum(d$part_tot_x_adapt)*100
d$part_tot_z_adapt<-ifelse(d$part_rentest_z==0,0,d$part_tot_z)
d$part_tot_z_adapt<-d$part_tot_z_adapt/sum(d$part_tot_z_adapt)*100
d$facteur_total<-with(d, exp_aritmeanZ_rentest**(part_tot_z_adapt/100)/exp_aritmeanX_rentest**(part_tot_x_adapt/100))
}
else {d<-NULL}
return(list(c,d))
}
prop_weight<-function(var, cellule)
{
data<-lapply(det_list, function(x) {
x %>% filter(categorie==cellule) %>% mutate(weight_rentest=ifelse(is.na(rentest), NA, weight)) %>% group_by_at(.vars = var) %>%
summarise(nb_tot=length(rent),
nb_rentest=sum(rentest_flg),
sum_weight=sum(weight, na.rm=T),
sum_weight_rentest=sum(weight_rentest, na.rm=T)) %>%
ungroup %>% mutate(part_tot=nb_tot/sum(nb_tot, na.rm=T)*100, part_rentest=nb_rentest/sum(nb_rentest, na.rm=T)*100,
part_weight=sum_weight/sum(sum_weight, na.rm=T)*100, part_weight_rentest=sum_weight_rentest/sum(sum_weight_rentest, na.rm=T)*100
) })
a<-data[[1]]
b<-data[[2]]
c<-merge(a,b, by=var, all=T, suffixes=c('_x', '_z'))
if (is.numeric(b[[1]])) {
a<-a[!is.na(a[,var]),] %>%
summarise( nb_tot_x=sum(nb_tot),
nb_rentest_x=sum(nb_rentest),
sum_weight_x=sum(sum_weight),
sum_weight_rentest_x=sum(sum_weight_rentest),
geomeanX_tot=exp(sum(log(a[!is.na(a[,var]),var])*sum_weight, na.rm=T)/sum(sum_weight,na.rm=T)) ,
geomeanX_rentest=exp(sum(log(a[!is.na(a[,var]),var])*sum_weight_rentest, na.rm=T)/sum(sum_weight_rentest,na.rm=T)) ,
aritmeanX_tot=sum(a[!is.na(a[,var]),var]*sum_weight, na.rm=T)/sum(sum_weight, na.rm=T) ,
aritmeanX_rentest=sum(a[!is.na(a[,var]),var]*sum_weight_rentest,na.rm=T)/sum(sum_weight_rentest,na.rm=T),
aritmeanX2_tot=sum(a[!is.na(a[,var]),var]**2*sum_weight, na.rm=T)/sum(sum_weight, na.rm=T) ,
aritmeanX2_rentest=sum(a[!is.na(a[,var]),var]**2*sum_weight_rentest,na.rm=T)/sum(sum_weight_rentest,na.rm=T)
)
b<-b[!is.na(b[,var]),]%>%
summarise(
nb_tot_x=sum(nb_tot),
nb_rentest_x=sum(nb_rentest),sum_weight_z=sum(sum_weight),
sum_weight_rentest_z=sum(sum_weight_rentest),
sum_weight_z=sum(sum_weight),
sum_weight_rentest_z=sum(sum_weight_rentest),
geomeanZ_tot=exp(sum(log(b[!is.na(b[,var]),var])*sum_weight, na.rm=T)/sum(sum_weight,na.rm=T)) ,
geomeanZ_rentest=exp(sum(log(b[!is.na(b[,var]),var])*sum_weight_rentest, na.rm=T)/sum(sum_weight_rentest,na.rm=T)) ,
aritmeanZ_tot=sum(b[!is.na(b[,var]),var]*sum_weight, na.rm=T)/sum(sum_weight, na.rm=T) ,
aritmeanZ_rentest=sum(b[!is.na(b[,var]),var]*sum_weight_rentest,na.rm=T)/sum(sum_weight_rentest,na.rm=T),
aritmeanZ2_tot=sum(b[!is.na(b[,var]),var]**2*sum_weight, na.rm=T)/sum(sum_weight, na.rm=T) ,
aritmeanZ2_rentest=sum(b[!is.na(b[,var]),var]**2*sum_weight_rentest,na.rm=T)/sum(sum_weight_rentest,na.rm=T)
)
d<-cbind(a,b)
}
else if (var=='CANTON_CD'|var=='commune')
{ e<-det_list$x_det %>% filter(categorie==cellule&rentest_flg) %>% mutate(weight_rentest=ifelse(is.na(rentest), NA, weight)) %>% group_by_at(.vars = var) %>%
summarise(exp_aritmeanX_rentest=exp(sum(Lagerating*weight_rentest, na.rm=T) / sum(weight_rentest, na.rm=T))
)
f<-det_list$z_det %>% filter(categorie==cellule&rentest_flg) %>% mutate(weight_rentest=ifelse(is.na(rentest), NA, weight)) %>% group_by_at(.vars = var) %>%
summarise(exp_aritmeanZ_rentest=exp(sum(Lagerating*weight_rentest, na.rm=T) / sum(weight_rentest, na.rm=T))
)
d<-merge(e,f, by=var, all=T, suffixes=c('', ''))
d<-merge(c,d, by=var, all=T, suffixes=c('', ''))
d[is.na(d)]<-0
d$facteur_rentest<-with(d, exp_aritmeanZ_rentest**(part_weight_rentest_z/100)/exp_aritmeanX_rentest**(part_weight_rentest_x/100))
d$part_weight_x_adapt<-ifelse(d$part_weight_rentest_x==0,0,d$part_weight_x)
d$part_weight_x_adapt<-d$part_weight_x_adapt/sum(d$part_weight_x_adapt)*100
d$part_weight_z_adapt<-ifelse(d$part_weight_rentest_z==0,0,d$part_weight_z)
d$part_weight_z_adapt<-d$part_weight_z_adapt/sum(d$part_weight_z_adapt)*100
d$facteur_total<-with(d, exp_aritmeanZ_rentest**(part_weight_z_adapt/100)/exp_aritmeanX_rentest**(part_weight_x_adapt/100))
}
else {d<-NULL}
return(list(c,d))
}
test<-list()
list_cell<-c(144)
var<-'surf_pce'
for (cell in list_cell)
{
ind<-grep(cell, list_cell)
test[[ind]]<-prop_weight(var, cell)
print(cell)
print(test[[ind]][1])
if (is.numeric(det_list[[1]][,var])){print(test[[ind]][2])} # 2e valeur seulement si numérique
if (var %in% c('commune', 'CANTON_CD'))
{ print(prod(test[[ind]][[2]]$facteur_total)) ; print(prod(test[[ind]][[2]]$facteur_rentest))} # cas spécial commune ou canton : calcul d'un facteur
}
names(test)<-list_cell
a<-test$'144'[[2]]
# nature missings lagerating
mis_lage<-subset(det_list$x_det, is.na(Lagerating))
nrow(mis_lage[is.na(mis_lage$constr_per_regbl),])
nrow(mis_lage[is.na(mis_lage$COORD_EAST_NB),])
nrow(mis_lage[!is.na(mis_lage$COORD_EAST_NB),])
mis_surf<-subset(det_list$x_det, is.na(zigroes))
table(mis_surf$GWR_SURFACE_NB, useNA="always")
table(mis_surf$surface, useNA="always")
# 2) Oubli d'imputations
tot$room<-factor(substr(tot$categorie,2,2))
tot$age<-factor(substr(tot$categorie,3,3))
tot$tranche<-factor(tot$tranche)
tot$indic_t<-!is.na(tot$categorie_t)
tot$indic_tprev<-!is.na(tot$categorie_tprev)
tot_det<-merge(tot,  det_new, by.x='apartment_nb', by.y='APARTMENT_NB')
a<-tot_det[!is.na(tot_det$flat_rent),]
ggplot(a, aes(x=flat_rent, y=rent.x/flat_rent*100))+geom_point()
summary(a$rent.x/a$flat_rent*100, useNA='always')
# tous les loyers forfaitaires ont un loyer imputé calculé selon un ratio cohérent avec outputs rpart !!
# 3) Zoom différences MPI - LOP
# 1.3 doit avoir été exécuté !!
library(reshape2)
base<-do.call(rbind, det_list)
# base$weight<-1 # pour analyse hors poids
list_cell<-c(114, 124, 134, 144, 154, 164)
# list_cell<-c(131, 132, 133, 134, 151, 152, 153, 154)
# list_cell<-c(134)
# list_cell<-c(151, 152, 153, 154)
pdf(paste0(path, 'CompLOP_MPI_', run.date, '.pdf'))
for (cell in list_cell)
{
# Partie rotative
data<-subset(base, categorie==cell&partie %in% c('x', 'z'))
data$flg_excl<-with(data, relation!=4)
sum<-data %>% mutate(weight_est=ifelse(is.na(rentest), 0, weight)) %>% group_by(partie, flg_excl) %>%
summarise(geomean=exp(sum(weight*log(rent)/sum(weight))),
geomean_est=exp(sum(weight_est*log(rentest)/sum(weight_est), na.rm=T)),
nb=length(rent))
sum_tot<-data %>% mutate(weight_est=ifelse(is.na(rentest), 0, weight)) %>% group_by(partie) %>% summarise(geomean=exp(sum(weight*log(rent)/sum(weight))), geomean_est=exp(sum(weight_est*log(rentest)/sum(weight_est), na.rm=T)))
sum_est<-sum %>% dplyr::select(partie, flg_excl, geomean_est)
sum_est<-merge(sum_est[sum_est$partie=='x',], sum_est[sum_est$partie=='z',], by='flg_excl', all=T, suffixes=c('_x','_z'))
sum<-merge(sum, sum_est, by='flg_excl', all=T) %>% mutate(geomean_est=ifelse(partie=='x', NA, geomean*geomean_est_x/geomean_est_z))
sum_tot_est<-sum_tot %>% dplyr::select(partie, geomean_est)
sum_tot_est<-cbind(x=sum_tot_est[sum_tot_est$partie=='x',], sum_tot_est[sum_tot_est$partie=='z',] )
sum_tot<-merge(sum_tot, sum_tot_est, by='partie', all=T) %>% mutate(geomean_est=ifelse(partie=='x', NA, geomean*x.geomean_est/geomean_est.y))
rm(sum_est, sum_tot_est)
# windows()
print(
ggplot(data, aes(x=partie, y=rent))+geom_boxplot(outlier.shape = NA)+geom_point(aes(col=relation_txt, size=weight), position='jitter', alpha=0.5)+
geom_point(data=sum, aes(x=partie, y=geomean), shape=13,size=3, col='red')+
geom_point(data=sum, aes(x=partie, y=geomean_est), shape=13,size=3, col='blue')+
geom_point(data=sum_tot, aes(x=partie, y=geomean), shape=17,size=4, col='red')+
geom_point(data=sum_tot, aes(x=partie, y=geomean_est), shape=17,size=4, col='blue')+
facet_grid(.~flg_excl)+
ggtitle(cell)+theme(text=element_text(size = 12), legend.position='bottom', legend.direction = 'vertical', axis.text=element_text(colour='black'))
)
sink(file = paste0(path, 'CompLOP_MPI_', run.date, '.txt'), append=T)
print(cell)
print(sum %>% dplyr::select(flg_excl, partie, geomean, geomean_est, nb) %>%
group_by(partie) %>% arrange(flg_excl) %>%
mutate(part_nb=nb/sum(nb)*100, ratio_geomean=last(geomean)/first(geomean)*100) %>%
group_by(flg_excl) %>%
mutate(index=last(geomean)/first(geomean)*100, index_est=last(geomean_est)/first(geomean)*100) %>%
ungroup %>%
mutate(index=ifelse(partie=="z", index, NA), index_est=ifelse(partie=="z", index_est, NA),
ratio_geomean=ifelse(flg_excl, ratio_geomean, NA))
)
sink()
# Partie panel
# Petite inexactitude liée aux poids pas totalement reproduits correctement
data<-subset(base, partie %in% c('y'))
data$flg_excl<-with(data, relation!=4)
data<-rbind(data[!is.na(data$rent_t), ] %>% filter(categorie_t==cell) %>%
mutate(partie = "y_t", rent=rent_t),
data[!is.na(data$rent_tprev), ] %>% filter(categorie_tprev==cell) %>%
mutate(partie = "y_tprev", rent=rent_tprev))
data<-data %>% mutate(flg_chgt=(rent_t!=rent_tprev | is.na(rent_t) | is.na(rent_tprev) | categorie_t !=categorie_tprev))
data$sens<-ifelse(
(is.na(data$rent_t) | data$categorie_t != cell), "out",
ifelse(
(is.na(data$rent_tprev) | data$categorie_tprev != cell), "in", "both")
)
sum<-data %>% mutate(weight_est=ifelse(is.na(rentest), 0, weight)) %>% group_by(partie, flg_excl) %>%
summarise(geomean=exp(sum(weight*log(rent)/sum(weight))),
geomean_est=exp(sum(weight_est*log(rentest)/sum(weight_est), na.rm=T)),
nb=length(rent))
sum_tot<-data %>% mutate(weight_est=ifelse(is.na(rentest), 0, weight)) %>% group_by(partie) %>% summarise(geomean=exp(sum(weight*log(rent)/sum(weight))), geomean_est=exp(sum(weight_est*log(rentest)/sum(weight_est), na.rm=T)))
table(data$partie, useNA="always")
sum_est<-sum %>% dplyr::select(partie, flg_excl, geomean_est)
sum_est<-merge(sum_est[sum_est$partie=='y_tprev',], sum_est[sum_est$partie=='y_t',], by='flg_excl', all=T, suffixes=c('_y_tprev','_y_t'))
sum<-merge(sum, sum_est, by='flg_excl', all=T) %>% mutate(geomean_est=ifelse(partie=='_y_tprev', NA, geomean*geomean_est_y_tprev/geomean_est_y_t))
sum_tot_est<-sum_tot %>% dplyr::select(partie, geomean_est)
sum_tot_est<-cbind(x=sum_tot_est[sum_tot_est$partie=='y_tprev',], sum_tot_est[sum_tot_est$partie=='y_t',] )
sum_tot<-merge(sum_tot, sum_tot_est, by='partie', all=T) %>% mutate(geomean_est=ifelse(partie=='y_tprev', NA, geomean*x.geomean_est/geomean_est.y))
rm(sum_est, sum_tot_est)
# windows()
print(
ggplot(data, aes(x=factor(partie, levels=c("y_tprev","y_t")), y=rent))+geom_boxplot(outlier.shape = NA)+geom_point(aes(col=relation_txt, size=weight), position='jitter', alpha=0.5)+
geom_point(data=subset(data, flg_chgt), aes(size=weight, shape=sens), col="black")+
geom_point(data=sum, aes(x=partie, y=geomean), shape=13,size=3, col='red')+
geom_point(data=sum, aes(x=partie, y=geomean_est), shape=13,size=3, col='blue')+
geom_point(data=sum_tot, aes(x=partie, y=geomean), shape=17,size=4, col='red')+
geom_point(data=sum_tot, aes(x=partie, y=geomean_est), shape=17,size=4, col='blue')+
scale_shape(solid = F)+
facet_grid(.~flg_excl)+
labs(title=cell, x="Periode")+theme(text=element_text(size = 12), legend.position='bottom', legend.direction = 'vertical', axis.text=element_text(colour='black'))
)
sink(file = paste0(path, 'CompLOP_MPI_', run.date, '.txt'), append=T)
print(cell)
print(sum %>% dplyr::select(flg_excl, partie, geomean, geomean_est, nb) %>%
group_by(partie) %>% arrange(flg_excl) %>%
mutate(part_nb=nb/sum(nb)*100, ratio_geomean=last(geomean)/first(geomean)*100) %>%
group_by(flg_excl) %>%
mutate(index=first(geomean)/last(geomean)*100, index_est=first(geomean_est)/last(geomean)*100) %>%
ungroup %>%
mutate(index=ifelse(partie=="y_t", index, NA), index_est=ifelse(partie=="y_t", index_est, NA),
ratio_geomean=ifelse(flg_excl, ratio_geomean, NA))
)
print(
data %>% filter((sens=="both" & partie != "y_tprev") | sens != "both" ) %>% group_by(sens) %>% summarise(n=n(), geomean=exp(sum(weight*log(rent)/sum(weight))))
)
print(
data %>% filter(sens=="both" & partie != "y_tprev") %>% group_by(sens, flg_chgt) %>% summarise(n=n(), geomean=exp(sum(weight*log(rent)/sum(weight)))) %>% ungroup() %>% mutate(part=n/sum(n)*100)
)
print(
data %>% filter(flg_chgt & sens=="both" & partie != "y_tprev") %>% ungroup() %>% mutate(var_t=rent_t/rent_tprev-1) %>% dplyr::select(var_t) %>% summary(.)
)
sink()
}
dev.off()
# 4) Zoom sur qq cas
cas<-subset(tot, rent_t<300)[, c('apartment_nb', 'categorie_t','tranche', 'partie','weight', 'rent')]
library(RCurl)
library(haven)
curlVersion()$protocols
protocol <- "sftp"
server <- "sas94prd02.bfs.admin.ch"
# upwd <- "t7b9o:pw"
upwd <- "t7222:Grandraid_20"
start1<-Sys.time()
tsfFilename <- "/project/pr2/preis/PPI/PharmaGrChimDouanes/exp21_2017_2019_202001_202009.sas7bdat"
url <- paste0(protocol, "://", server, tsfFilename)
sasdat <- getBinaryURL(url = url, userpwd=upwd)
test<-read_sas(sasdat)
end1<-Sys.time()
start2<Sys.time()
tsfFilename <- "/project/pr2/preis/PPI/PharmaGrChimDouanes/exp21_2017_2019_202001_202009.csv"
url <- paste0(protocol, "://", server, tsfFilename)
txtdat <- getURL(url = url, userpwd=upwd)
end1-start1
